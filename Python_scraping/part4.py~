from pymongo import MongoClient

'''
set a latitude and longitude tolerance
unassigned points within this range of tolerance (a square centered at a known latitude, longitude pair
will be assigned to the same country
note that the latitude value should be larger thant he longitude value
to convert latitude/longitude to distance, use an engine like this one: http://www.nhc.noaa.gov/gccalc.shtml
'''

client = MongoClient()
db = client.endo
collection_runs = db.runs

cursor = collection_runs.find({'$and':[{"latitude_fail":{'$exists':False}}, {"run_info":{'$exists':True}}, {"latitude":{'$exists':False}}, {'$or':[{"run_info.points":{'$exists':1}}, {"run_info.laps":{'$exists':1} }]}]}, no_cursor_timeout = True)
for result_object in cursor:

   latitude = 0
   longitude = 0

   #some documents contain a 'laps' field that often has a latitude/longitude included within an 'imperial' or 'metric' subdocument
   if(result_object["run_info"].get("laps", None)):
       if(result_object["run_info"].get("laps", None).get("metric", None)):
          g = result_object["run_info"].get("laps", None).get("metric", None)[0]
          latitude =  g.get("begin_latitude", None)
          longitude = g.get("begin_longitude", None)
   elif(result_object["run_info"].get("laps", None)):
       if(result_object["run_info"].get("laps", None).get("imperial", None)):
          g = result_object["run_info"].get("laps", None).get("imperial", None)[0]
          latitude =  g.get("begin_latitude", None)
          longitude = g.get("begin_longitude", None)

   #other documents have a 'points' field that includes subdocuments with latitude/longitide data
   elif(result_object["run_info"].get("points", None)):
      if(result_object["run_info"].get("points", None).get("points", None)):
         g = result_object["run_info"].get("points", None).get("points", None)[0]
         latitude =  g.get("latitude", None)
         longitude = g.get("longitude", None)
   
   #if we found a latitude, longitude pair, save at highest level of document
   #otherwise mark document as not containing a latitude, longitude pair so we do not check again
   if latitude and longitude:
      collection_runs.update({"run":result_object["run"]}, {'$set':{"latitude":latitude}, '$set':{"longitude":longitude}})
   else:
      collection_runs.update({"run":result_object["run"]}, {'$set':{"latitude_fail":1}})


