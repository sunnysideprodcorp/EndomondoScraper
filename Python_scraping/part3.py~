import time
import random
from pymongo import MongoClient
import json
import pickle
import requests

client = MongoClient()
db = client.endo
collection = db.users
collection_runs = db.runs
cursor = collection_runs.find({"run_info" : {'$exists':False}, "failed_url":{'$exists':False}}, no_cursor_timeout=True)

for result_object in cursor:
    string_use_user = result_object["endo"]
    string_use_workout = result_object["run"]
    timesleep = random.uniform(.1, 2)
    time.sleep(timesleep)
    UA = 'Mozilla/5.0 (X11; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0'
    url = 'https://www.endomondo.com/rest/v1/users/%s/workouts/%s'%(string_use_user, string_use_workout)
    r = requests.get(url, headers = {'User-Agent':UA})

    try:
        jsonobject = r.json()
        if 'laps' in jsonobject and jsonobject['laps'] is not None:
            if 'imperial' in jsonobject['laps']:
                laps_array = jsonobject['laps']['imperial']
                type = 'imperial'
            if 'metric' in jsonobject['laps']:
                laps_array = jsonobject['laps']['metric']
                type = 'metric'
            if laps_array is not None:
                jsonobject['laps_correct'] = dict()
                jsonobject['laps_correct'][type] = list()
                for document in laps_array:
                    if document.__class__.__name__ == "dict":
                        document_dict = document
                    else:
                        document_dict = json.loads(document)
                    if 'small_encoded_polyline' in document_dict and document_dict['small_encoded_polyline'] is not None:
                        del document_dict['small_encoded_polyline']
                        document = document_dict
                        jsonobject['laps_correct'][type].append(document_dict)
                del jsonobject['laps']
                jsonobject['laps'] = jsonobject.pop('laps_correct')


        if 'points' in jsonobject and jsonobject['points'] is not None:
            if 'points' in jsonobject['points']:
                laps_array = jsonobject['points']['points']
                jsonobject['points_correct'] = dict()
                jsonobject['points_correct']['points'] = list()
                if laps_array is not None:
                    for document in laps_array:
                        if document.__class__.__name__ == "dict":
                            document_dict = document
                        else:
                            document_dict = json.loads(document)
                            if 'small_encoded_polyline' in document_dict and document_dict['small_encoded_polyline'] is not None:
                                del document_dict['small_encoded_polyline']
                                document = document_dict
                                jsonobject['points_correct']['points'].append(document_dict)
                del jsonobject['points']
                jsonobject['points'] = jsonobject.pop('points_correct')

        if 'small_encoded_polyline' in jsonobject and jsonobject['small_encoded_polyline'] is not None:
            del jsonobject['small_encoded_polyline']           

    except ValueError as e:
        collection_runs.update({"run":string_use_workout}, {'$set':{"failed_url":1}}, upsert= False)
    else:
        collection_runs.update({"run":string_use_workout}, {'$set':{"run_info":jsonobject}}, upsert= False)
