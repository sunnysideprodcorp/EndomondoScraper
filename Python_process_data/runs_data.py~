import pprint
import math
import os
import pymongo
from pymongo import MongoClient
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plot
from sklearn.linear_model import LinearRegression
import numpy
from sklearn.metrics import r2_score
from sklearn import cross_validation
from sklearn import datasets
import sys

client = MongoClient()
db = client.endo
collection = db.users
collection_runs = db.runs

counter = 0
limit = 3000
c = db.runs.find().limit(limit).skip(counter*limit)

df = pd.DataFrame(list(c))


author_list = ['gender', 'weight', 'height']
weather_list = ['temperature', 'humidity', 'wind_speed', 'type']
name_list= [ 'duration', 'distance', 'include_in_stats', 'ascent', 'descent', 'calories', 'heart_rate', 'heart_rate_max', 'steps', 'notes', 'speed_avg', 'heart_rate_avg', 'speed_max', 'local_start_time']

all_names = []
all_names.extend(author_list)
all_names.extend(weather_list)
all_names.extend(name_list)



for name in all_names:
    df[name] = numpy.nan

run_info = df['run_info']


df[['local_start_time']] = df[['local_start_time']].astype(str)
df[['notes']] = df[['notes']].astype(str)
for i in range(len(df['run'])):
    print("now at run %d"%i)
    g = run_info[i]
    if g.get('weather'):
        for name in weather_list:
            if g.get('weather').get(name):
                df.set_value(i, name, g['weather'][name])

    if g.get('author'):
        for name in author_list:
            if g.get('author').get(name):
                df.set_value(i, name, g['author'][name])

    for name in name_list:
        if g.get(name):
            if name is 'local_start_time' or name is 'notes':
                try:
                    df.set_value(i, name, str(g[name])[0:19])
                except:
                    pass
        
            else:
                df.set_value(i, name, g[name])


del df['run_info']

df.to_csv("runs_big_1.csv", encoding='utf-8')
                
        


 

